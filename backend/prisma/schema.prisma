// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para roles de usuario
enum UserRole {
  ADMIN
  CASHIER
  COOK
  CUSTOMER
}

// Enum para estados de pedido
enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

// Modelo de usuarios
model User {
  id        String   @id @default(cuid())
  nombre    String
  email     String   @unique
  password  String
  rol       UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  orders Order[]

  @@map("users")
}

// Modelo de categor√≠as
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  products Product[]

  @@map("categories")
}

// Modelo de productos
model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  isAvailable Boolean @default(true)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

// Modelo de pedidos
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  notes       String?
  isPaid      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relaciones
  customerId String?
  customer   User?       @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

// Modelo de items de pedido
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime @default(now())

  // Relaciones
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

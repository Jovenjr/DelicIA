---
description: 
globs: 
alwaysApply: true
---
# üö® **REGLAS CR√çTICAS PARA TODO EL EQUIPO DELICIA** üö®

## ‚ö†Ô∏è **USO OBLIGATORIO DE 5 SERVIDORES MCP + VERIFICACI√ìN DE DIRECTORIOS**

### üîß **CURL MCP - Para Operaciones CRUD**
```
‚ùå PROHIBIDO: Usar consola/terminal para operaciones CRUD
‚úÖ OBLIGATORIO: Usar servidor MCP "curl" para:
- Probar endpoints del backend
- Verificar respuestas de APIs
- Debugging de llamadas HTTP
- Validar integraciones
```

### ‚è∞ **TIME MCP - Para Fecha y Hora**
```
‚úÖ OBLIGATORIO: Usar servidor MCP "time" para:
- Documentar tareas completadas con timestamp exacto
- Reportes con fecha/hora actual
- Logging de eventos importantes
- Seguimiento temporal de desarrollo

Ejemplo: [‚úÖ 2024-01-15 14:30:22] Task 1.1 completada - Setup inicial
```

### üìö **CONTEXT7 MCP - Documentaci√≥n Actualizada**
```
‚ùå PROHIBIDO: Asumir conocimiento de librer√≠as/frameworks
‚úÖ OBLIGATORIO: Usar servidor MCP "context7" para:
- Consultar documentaci√≥n actualizada de React, NestJS, Prisma
- Verificar sintaxis correcta antes de implementar
- Obtener mejores pr√°cticas actuales
- Resolver dudas t√©cnicas espec√≠ficas

NO SE HAGAN LOS LISTOS - SIEMPRE CONSULTEN CONTEXT7
```

### üß† **MEMORY MCP - Coordinaci√≥n del Equipo**
```
‚úÖ OBLIGATORIO: Usar servidor MCP "memory" para:
- Comunicaci√≥n entre Frontend ‚Üî Backend ‚Üî IA
- Notas r√°pidas pero importantes
- Mensajes para otros miembros del equipo
- Coordinaci√≥n de dependencias

ESTRUCTURA DE ENTIDADES:
- Entidad "Frontend" - mensajes para desarrollador frontend
- Entidad "Backend" - mensajes para desarrollador backend  
- Entidad "IA" - mensajes para desarrollador IA
- Entidad "General" - notas del proyecto general

Ejemplo: "Necesito que Backend complete Task 2.1 antes de integrar login"
```

### üóÑÔ∏è **POSTGRES MCP - Base de Datos Directa**
```
‚úÖ OBLIGATORIO: Usar servidor MCP "postgres" para:
- Consultas directas a la base de datos cuando sea necesario
- Verificar datos durante desarrollo
- Debugging de problemas de datos
- Operaciones manuales urgentes

‚ö†Ô∏è IMPORTANTE: La base de datos se mantiene con migraciones Prisma
‚ùå NO usar para cambios de schema - usar Prisma migrate
‚úÖ S√ç usar para consultas, verificaciones y operaciones manuales

Ejemplo: Verificar si un pedido se cre√≥ correctamente o consultar datos espec√≠ficos
```

### üíª **EJECUCI√ìN DE COMANDOS - DIRECTORIOS CR√çTICOS**
```
üö® CR√çTICO: VERIFICAR DIRECTORIO ANTES DE EJECUTAR COMANDOS

ESTRUCTURA DEL PROYECTO:
DelicIA/
‚îú‚îÄ‚îÄ frontend/          ‚Üê Aqu√≠ ejecutar comandos de React/Vite
‚îú‚îÄ‚îÄ backend/           ‚Üê Aqu√≠ ejecutar comandos de NestJS/Prisma  
‚îî‚îÄ‚îÄ [otros archivos]

‚ö†Ô∏è ANTES DE EJECUTAR CUALQUIER COMANDO:
1. pwd / Get-Location - Verificar directorio actual
2. Cambiar al directorio correcto si es necesario
3. NUNCA ejecutar comandos desde directorio incorrecto

COMANDOS POR DIRECTORIO:

üìÅ FRONTEND (DelicIA/frontend/):
‚úÖ npm run dev          - Levantar servidor desarrollo
‚úÖ npm run build        - Build de producci√≥n
‚úÖ npm install [pkg]    - Instalar dependencias React
‚úÖ npx shadcn add [comp] - Agregar componentes ShadCN

üìÅ BACKEND (DelicIA/backend/):
‚úÖ npm run start:dev    - Levantar servidor NestJS
‚úÖ npm run build        - Build de producci√≥n
‚úÖ npx prisma migrate dev - Ejecutar migraciones
‚úÖ npx prisma generate  - Generar cliente Prisma
‚úÖ npm install [pkg]    - Instalar dependencias NestJS

‚ùå ERRORES COMUNES A EVITAR:
- Ejecutar 'npm run dev' desde DelicIA/ (directorio ra√≠z)
- Ejecutar comandos de Prisma desde frontend/
- Ejecutar comandos de React desde backend/
- No verificar directorio antes de instalar dependencias

üîß COMANDOS DE VERIFICACI√ìN:
Windows: Get-Location o pwd
Linux/Mac: pwd
```

---

# Backend NestJS Rules - Delicia

## üèóÔ∏è Arquitectura Modular

### Estructura de M√≥dulos
```typescript
// ‚úÖ Estructura recomendada
modules/
  auth/
    ‚îú‚îÄ‚îÄ auth.module.ts
    ‚îú‚îÄ‚îÄ auth.controller.ts
    ‚îú‚îÄ‚îÄ auth.service.ts
    ‚îú‚îÄ‚îÄ dto/
    ‚îÇ   ‚îú‚îÄ‚îÄ login.dto.ts
    ‚îÇ   ‚îî‚îÄ‚îÄ register.dto.ts
    ‚îú‚îÄ‚îÄ guards/
    ‚îî‚îÄ‚îÄ strategies/
```

### Decorators Apropiados
```typescript
// ‚úÖ Usar decorators correctos
@Injectable()
export class AuthService {}

@Controller('auth')
export class AuthController {}

@UseGuards(JwtAuthGuard)
@Get('profile')
async getProfile() {}
```

## üóÑÔ∏è Prisma y Base de Datos

### Queries Optimizadas
```typescript
// ‚úÖ Usar select/include apropiados
const booking = await this.prisma.booking.findUnique({
  where: { id },
  select: {
    id: true,
    totalAmount: true,
    tour: {
      select: {
        id: true,
        title: true
      }
    }
  }
});

// ‚úÖ Eager loading para reducir N+1 queries
const tours = await this.prisma.tour.findMany({
  include: {
    destinations: true,
    departureDates: true
  }
});
```

### Transacciones para Operaciones Cr√≠ticas
```typescript
// ‚úÖ Usar transacciones para operaciones at√≥micas
const result = await this.prisma.$transaction(async (tx) => {
  const booking = await tx.booking.create({
    data: bookingData
  });
  
  await tx.departureDate.update({
    where: { id: departureDateId },
    data: {
      availableSpots: {
        decrement: passengers.length
      }
    }
  });
  
  return booking;
});
```

### Migraciones
```bash
# ‚úÖ Comandos para migraciones
npx prisma migrate dev --name descriptive_migration_name
npx prisma generate
npx prisma db push # Solo para desarrollo
```

## üîç Validaci√≥n con class-validator

### DTOs con Validaci√≥n
```typescript
// ‚úÖ DTOs robustos con validaci√≥n
export class CreateBookingDto {
  @IsUUID()
  @IsNotEmpty()
  tourId: string;

  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => PassengerDto)
  passengers: PassengerDto[];

  @IsOptional()
  @IsString()
  @MaxLength(500)
  specialRequests?: string;

  @IsNumber()
  @IsPositive()
  totalAmount: number;
}
```

### Pipes de Validaci√≥n
```typescript
// ‚úÖ Usar ValidationPipe globalmente
app.useGlobalPipes(new ValidationPipe({
  whitelist: true,
  forbidNonWhitelisted: true,
  transform: true,
  transformOptions: {
    enableImplicitConversion: true
  }
}));
```

## ‚ö†Ô∏è Manejo de Errores

### Exception Filters Personalizados
```typescript
// ‚úÖ Filters de excepci√≥n estructurados
@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const status = exception.getStatus();

    response.status(status).json({
      statusCode: status,
      message: exception.message,
      timestamp: new Date().toISOString(),
    });
  }
}
```

### Logging Estructurado
```typescript
// ‚úÖ Logging con contexto
@Injectable()
export class BookingsService {
  private readonly logger = new Logger(BookingsService.name);

  async create(createBookingDto: CreateBookingDto) {
    this.logger.log(`Creating booking for tour ${createBookingDto.tourId}`);
    
    try {
      // l√≥gica del servicio
      this.logger.log(`Booking created successfully: ${result.id}`);
      return result;
    } catch (error) {
      this.logger.error(`Failed to create booking: ${error.message}`, error.stack);
      throw error;
    }
  }
}
```

## üîê Guards y Middleware

### Guards de Autenticaci√≥n
```typescript
// ‚úÖ Guards apropiados
@UseGuards(JwtAuthGuard)
@UseGuards(RolesGuard)
@Roles('admin')
@Get('admin/bookings')
async getAdminBookings() {}
```

### Rate Limiting
```typescript
// ‚úÖ Rate limiting para endpoints sensibles
@UseGuards(ThrottlerGuard)
@Throttle(5, 60) // 5 requests por minuto
@Post('login')
async login() {}
```

## üìä Performance y Optimizaci√≥n

### Caching
```typescript
// ‚úÖ Cache para datos frecuentes
@Injectable()
export class ToursService {
  @Cacheable('tours', 300) // 5 minutos
  async findAll() {
    return this.prisma.tour.findMany();
  }
}
```

### Paginaci√≥n
```typescript
// ‚úÖ Paginaci√≥n server-side
async findMany(page: number = 1, limit: number = 10) {
  const skip = (page - 1) * limit;
  
  const [data, total] = await Promise.all([
    this.prisma.tour.findMany({
      skip,
      take: limit,
      orderBy: { createdAt: 'desc' }
    }),
    this.prisma.tour.count()
  ]);
  
  return {
    data,
    meta: {
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    }
  };
}
```

## üõ°Ô∏è Seguridad

### Sanitizaci√≥n de Entrada
```typescript
// ‚úÖ Sanitizar y validar entradas
@Post()
async create(
  @Body(new ValidationPipe({ transform: true, whitelist: true }))
  createDto: CreateTourDto
) {
  // Los datos ya est√°n validados y sanitizados
  return this.service.create(createDto);
}
```

### Headers de Seguridad
```typescript
// ‚úÖ Configurar headers de seguridad
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"]
    }
  }
}));
```

## üìã Checklist Backend

- [ ] M√≥dulos organizados por feature
- [ ] DTOs con validaci√≥n class-validator
- [ ] Queries Prisma optimizadas
- [ ] Transacciones para operaciones cr√≠ticas
- [ ] Exception filters implementados
- [ ] Logging estructurado
- [ ] Guards de autenticaci√≥n y autorizaci√≥n
- [ ] Rate limiting en endpoints sensibles
- [ ] Paginaci√≥n server-side
- [ ] Caching para datos frecuentes
- [ ] Headers de seguridad configurados

## ‚õî Anti-patrones Backend

- Queries N+1 sin optimizar
- Operaciones sin transacciones
- DTOs sin validaci√≥n
- Hardcodear valores de configuraci√≥n
- Ignorar manejo de errores
- Logs sin contexto
- Endpoints sin rate limiting
- Datos sensibles en logs

## üö® **RECORDATORIO FINAL MCP**

**ANTES DE CUALQUIER IMPLEMENTACI√ìN:**
1. ‚è∞ Consultar TIME para timestamp actual
2. üìö Consultar CONTEXT7 para documentaci√≥n actualizada  
3. üß† Revisar MEMORY para mensajes del equipo
4. üîß Usar CURL para probar funcionalidad
5. üóÑÔ∏è Usar POSTGRES para consultas directas cuando sea necesario
6. üíª VERIFICAR DIRECTORIO antes de ejecutar comandos

**¬°NO EXCEPCIONES! ESTOS 6 PUNTOS SON OBLIGATORIOS** üö®
